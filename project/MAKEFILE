#include<stdio.h>
#include<stdlib.h>
int jogo[9][9];// this array stores the game start-position in the column, position in line
int save_jogo[100][9][9];//This and the below function as a memory card for the program.
int save_ppalp[100], save_palpv[100], num_save=0, save_x[100], save_y[100];
void capt(void)//this function captures the game and stores it in the game matrix
{
int a;
for(a=0; a<9; a++)
{
printf("\n  Enter the content of the% of the line, \ n \ n replacing the spaces by 0 \ n \ n and separating the numbers \ n \ n ", a + 1);
fflush (stdin);
(a) [0], & set [a] [1], & set [a] [2], & set [a] ] [3], & game [a] [4], & game [a] [5], & game [a] [6], & game [a] [7], & game [a] [8]);
printf ("\ n \ n");
}
}
void most (void) // this function displays on the screen the contents of the game array
{
int a, b;
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
if(b==8)
{
printf(" %d \n\n", jogo[a]);
}
else
{
printf(" %d ", jogo[a]);
}
}
}
}
void load(void)//this function loads the game into a state in which the machine had a "doubt" and opted for a path that led to a lost game
{
int a, b;
num_save=num_save-1;
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
game[a]=save_jogo[num_save][a];
}
}
game[save_x[num_save]][save_y[num_save]]=save_palpv[num_save];
}
int calc(int x, int y, int sinal)//this function is the head of the program, it examines each house in each cell and finds an obvious number for it, in case the number is not obvious, it saves the game and kicks a result
{
int lin[9], col[9], grupo[9];
int palp, a, b, d, palpv=0, ppalp=0, numpos=0;
for(a=0; a<9; a++)
{
lin[a]=jogo[x][a];
}
for(a=0; a<9; a++)
{
col[a]=jogo[a][y];
}
int c, l;//From here, the function tries to find the house number
if(x<3 && y<3)c=0, l=0;
if(x<3 && y>2 && y<6)c=0, l=3;
if(x<3 && y>5)c=0, l=6;
if(x>2 && x<6 && y<3)c=3, l=0;
if(x>2 && x<6 && y >2 && y<6)c=3, l=3;
if(x>2 && x<6 && y>5)c=3, l=6;
if(x>5 && y<3)c=6, l=0;
if(x>5 && y>2 && y<6)c=6, l=3;
if(x>5 && y>5)c=6, l=6;
grupo[0]=jogo[c][l];
grupo[1]=jogo[c][l+1];
grupo[2]=jogo[c][l+2];
grupo[3]=jogo[c+1][l];
grupo[4]=jogo[c+1][l+1];
grupo[5]=jogo[c+1][l+2];
grupo[6]=jogo[c+2][l];
grupo[7]=jogo[c+2][l+1];
grupo[8]=jogo[c+2][l+2];
for(palp=1; palp<10; palp++)
{
d=0;
for(a=0; a<9; a++)
{
if(palp==lin[a])d++;
}
for(a=0; a<9; a++)
{
if(palp==col[a])d++;
}
for(a=0; a<9; a++)
{
if(palp==grupo[a])d++;
}
if(d==0)
{
ppalp=palpv;
palpv=palp;
numpos++;
}
}
if(numpos==1)return(palpv);//if an obvious number is found, it is written in the game array
if(sinal==1 && numpos==2)
{
save_ppalp[num_save]=ppalp;
save_palpv[num_save]=palpv;
save_x[num_save]=x;
save_y[num_save]=y;
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
save_jogo[num_save][a]=jogo[a];
}
}
num_save++;
return(ppalp);
}
return(0);
}
main()
{
char resposta;
puts("\n Program to solve sudoku games\n");
system("pause");
inicio:
int a, b, c=0, d=0, sinal=0, loop=0;
int retorno;
capt();
while(c!=405)
{
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
if(jogo[a]==0)
{
retorno=calc(a, b, sinal);
jogo[a]=retorno;
if(retorno!=0)
{
loop=0;
sinal=0;
}
}
}
}
c=0;
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
c=c+jogo[a];
}
}
if(d==c)
{
loop++;//signal and loop are job information for the function calc
sinal=1;
}
d=c;
if(loop==2)load();
if(loop>2)
{
puts("\n Erro ao calcular\n");
system("pause");
break;
}
}
most();
until here:
puts("\n Calculate again? - s = yes, n = no \ n "); // here the program checks if the user wants to calculate another game
fflush(stdin);
scanf("%c", &resposta);
while(answer! = 's' && answer!='n')
{
puts("\n Answer invalida\n");
goto until_here;
}
if(answer=='s')
{
for(a=0; a<9; a++)
{
for(b=0; b<9; b++)
{
jogo[a]=0;
}
}
num_save=0;
d=0;
sinal=0;
loop=0;
c=0;
goto inicio;
}
if(answer=='n')
{
return(0);
}
}
